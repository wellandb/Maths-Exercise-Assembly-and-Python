KMD
00000000:             ; ; COMP15111 lab 4 - Template file
00000000:             ; 
00000000:             ; print_char      equ     0               ; Define names to aid readability
00000000:             ; stop            equ     2
00000000:             ; print_str       equ     3
00000000:             ; print_no        equ     4
00000000:             ; 
00000000:             ; cLF             equ     10              ; Line-feed character
00000000:             ; 
00000000:             ; 
00000000: E28FD064    ;                 ADR     SP, _stack      ; set SP pointing to the end of our stack
00000004: EA0000A6    ;                 B       main
00000008:             ; 
00000008:             ;                 DEFS    100             ; this chunk of memory is for the stack
0000006C:             ; _stack                                  ; This label is 'just after' the stack space
0000006C:             ; 
0000006C:             ; 
0000006C: 54 68 69 73 ; wasborn         DEFB    "This person was born on ",0
00000070: 20 70 65 72 ; 
00000074: 73 6F 6E 20 ; 
00000078: 77 61 73 20 ; 
0000007C: 62 6F 72 6E ; 
00000080: 20 6F 6E 20 ; 
00000084: 00          ; 
00000085: 54 68 69 73 ; was             DEFB    "This person was ",0
00000089: 20 70 65 72 ; 
0000008D: 73 6F 6E 20 ; 
00000091: 77 61 73 20 ; 
00000095: 00          ; 
00000096: 20 6F 6E 20 ; on              DEFB    " on ",0
0000009A: 00          ; 
0000009B: 54 68 69 73 ; is              DEFB    "This person is ",0
0000009F: 20 70 65 72 ; 
000000A3: 73 6F 6E 20 ; 
000000A7: 69 73 20 00 ; 
000000AB: 20 74 6F 64 ; today           DEFB    " today!",0
000000AF: 61 79 21 00 ; 
000000B3: 54 68 69 73 ; willbe          DEFB    "This person will be ",0
000000B7: 20 70 65 72 ; 
000000BB: 73 6F 6E 20 ; 
000000BF: 77 69 6C 6C ; 
000000C3: 20 62 65 20 ; 
000000C7: 00          ; 
000000C8:             ;                 ALIGN
000000C8:             ; 
000000C8: 00000017    ; pDay              DEFW  23              ;  pDay = 23    //or whatever is today's date
000000CC: 0000000B    ; pMonth          DEFW    11              ;  pMonth = 11  //or whatever is this month
000000D0: 000007D5    ; pYear             DEFW  2005    ;  pYear = 2005 //or whatever is this year
000000D4:             ; 
000000D4:             ; 
000000D4:             ; ; Part 3
000000D4:             ; ; def printDate(time)
000000D4:             ; ; parameter
000000D4:             ; ;   R1 = bMonth
000000D4:             ; ;   R2 = byear
000000D4:             ; ;   R3 = time: #1 = past, #2 = present, #3 = future
000000D4:             ; ;   R4 = year 
000000D4:             ; ;   R5 = age
000000D4:             ; ;   R6 = bday
000000D4:             ; printDate
000000D4:             ; 
000000D4: E3530001    ;         CMP R3, #1
000000D8: 0A000004    ;         BEQ born
000000DC: E3530002    ;         CMP R3, #2
000000E0: 0A00000F    ;         BEQ past
000000E4: E3530003    ;         CMP R3, #3
000000E8: 0A00001A    ;         BEQ future
000000EC:             ; 
000000EC:             ; endPrint
000000EC: E1A0F00E    ;         MOV PC, LR
000000F0:             ; 
000000F0:             ; born
000000F0: E1A00006    ;                 MOV     R0, R6
000000F4: EF000004    ;                 SVC     print_no
000000F8: E3A0002F    ;                 MOV     R0, #'/'
000000FC: EF000000    ;                 SVC     print_char
00000100: E1A00001    ;                 MOV     R0, R1
00000104: EF000004    ;                 SVC     print_no
00000108: E3A0002F    ;                 MOV     R0, #'/'
0000010C: EF000000    ;                 SVC     print_char
00000110: E1A00002    ;                 MOV     R0, R2
00000114: EF000004    ;                 SVC     print_no
00000118: E3A0000A    ;                 MOV     R0, #cLF
0000011C: EF000000    ;                 SVC     print_char
00000120:             ; 
00000120: EAFFFFF1    ;         B endPrint
00000124:             ; 
00000124:             ; past
00000124: E1A00006    ;                 MOV     R0, R6
00000128: EF000004    ;                 SVC     print_no
0000012C: E3A0002F    ;                 MOV     R0, #'/'
00000130: EF000000    ;                 SVC     print_char
00000134: E1A00001    ;                 MOV     R0, R1
00000138: EF000004    ;                 SVC     print_no
0000013C: E3A0002F    ;                 MOV     R0, #'/'
00000140: EF000000    ;                 SVC     print_char
00000144: E1A00004    ;                 MOV     R0, R4
00000148: EF000004    ;                 SVC     print_no
0000014C: E3A0000A    ;                 MOV     R0, #cLF
00000150: EF000000    ;                 SVC     print_char
00000154:             ;         
00000154: EAFFFFE4    ;         B endPrint
00000158:             ; 
00000158:             ; future
00000158: E1A00006    ;                 MOV     R0, R6
0000015C: EF000004    ;                 SVC     print_no
00000160: E3A0002F    ;                 MOV     R0, #'/'
00000164: EF000000    ;                 SVC     print_char
00000168: E1A00001    ;                 MOV     R0, R1
0000016C: EF000004    ;                 SVC     print_no
00000170: E3A0002F    ;                 MOV     R0, #'/'
00000174: EF000000    ;                 SVC     print_char
00000178: E1A00004    ;                 MOV     R0, R4
0000017C: EF000004    ;                 SVC     print_no
00000180: E3A0000A    ;                 MOV     R0, #cLF
00000184: EF000000    ;                 SVC     print_char
00000188:             ;         
00000188: EAFFFFD7    ;         B endPrint
0000018C:             ; 
0000018C:             ; ; def printAgeHistory (bDay, bMonth, bYear)
0000018C:             ; 
0000018C:             ; ; parameters
0000018C:             ; ;  R0 = bDay (on entry, moved to R6 to allow SVC to output via R0)
0000018C:             ; ;  R1 = bMonth
0000018C:             ; ;  R2 = bYear
0000018C:             ; ; local variables (callee-saved registers)
0000018C:             ; ;  R4 = year
0000018C:             ; ;  R5 = age
0000018C:             ; ;  R6 = bDay - originally R0
0000018C:             ; 
0000018C:             ; printAgeHistory
0000018C: E92D0070    ;         STMFD SP!,      {R6-R4}                 ; callee saves three registers
00000190: E1A06000    ;         MOV R6, R0
00000194:             ; 
00000194:             ; ;   year = bYear + 1
00000194: E2824001    ;                 ADD     R4, R2, #1
00000198:             ; ;   age = 1;
00000198: E3A05001    ;                 MOV     R5, #1
0000019C:             ; 
0000019C:             ; ; print("This person was born on " + str(bDay) + "/" + str(bMonth) + "/" + str(bYear))
0000019C: E24F0F4E    ;                 ADRL    R0, wasborn
000001A0: EF000003    ;                 SVC     print_str
000001A4:             ;             
000001A4: E3A03001    ;         MOV R3, #1
000001A8: E92D4000    ;         STMFD SP!, {LR}
000001AC: EBFFFFC8    ;         BL printDate
000001B0: E8BD4000    ;         LDMFD SP!, {LR}
000001B4:             ; 
000001B4:             ; 
000001B4:             ; 
000001B4:             ; ; this code does: while year < pYear //{
000001B4: E51F00EC    ; loop1   LDR     R0, pYear
000001B8: E1540000    ;                 CMP     R4, R0
000001BC: 1A000015    ;                 BNE     end1            ; Years are unsigned
000001C0: E51F00FC    ;         LDR R0, pMonth
000001C4: E1510000    ;         CMP R1, R0
000001C8: BA000012    ;         BLT end1
000001CC: E51F010C    ;         LDR R0, pDay
000001D0: E1560000    ;         CMP R6, R0
000001D4: BA00000F    ;         BLT end1
000001D8: 0A00000E    ;         BEQ end1
000001DC:             ; 
000001DC:             ; 
000001DC:             ; ; for part 4, should be changed to:
000001DC:             ; ; while year < pYear or
000001DC:             ; ;                               (year == pYear and bMonth < pMonth) or
000001DC:             ; ;                               (year == pYear and bMonth == pMonth and bDay < pDay):
000001DC:             ; 
000001DC:             ; ;  print("This person was " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(yea
                      ; r))
000001DC: E24F005F    ;                 ADRL    R0, was
000001E0: E2400C01    ; 
000001E4: EF000003    ;                 SVC     print_str
000001E8: E1A00005    ;                 MOV     R0, R5
000001EC: EF000004    ;                 SVC     print_no
000001F0: E24F0062    ;                 ADRL    R0, on
000001F4: E2400C01    ; 
000001F8: EF000003    ;                 SVC     print_str
000001FC:             ; 
000001FC: E3A03002    ;         MOV R3, #2
00000200: E92D4000    ;         STMFD SP!, {LR}
00000204: EBFFFFB2    ;         BL printDate
00000208: E8BD4000    ;         LDMFD SP!, {LR}
0000020C:             ; 
0000020C:             ; 
0000020C:             ;                 ; year = year + 1
0000020C: E2844001    ;                 ADD     R4, R4, #1
00000210:             ;                 ; age = age + 1
00000210: E2855001    ;                 ADD     R5, R5, #1
00000214:             ;                 ; //}
00000214: EAFFFFE6    ;                 B       loop1
00000218:             ; 
00000218:             ; end1
00000218:             ; ; this code does: if (bMonth == pMonth):
00000218:             ; ; for part 4, should be changed to:
00000218:             ; ; if (bMonth == pMonth and bDay == pDay):
00000218: E51F0154    ;                 LDR     R0, pMonth
0000021C: E1510000    ;                 CMP     R1, R0
00000220: 1A00000D    ;                 BNE     else1
00000224: E51F0164    ;         LDR R0, pDay
00000228: E1560000    ;         CMP R6, R0
0000022C: 1A00000A    ;         BNE else1
00000230:             ; 
00000230:             ; 
00000230:             ; ; print("This person is " + str(age) + " today!")
00000230: E24F009D    ;                 ADRL    R0, is
00000234: E2400C01    ; 
00000238: EF000003    ;                 SVC     print_str
0000023C: E1A00005    ;                 MOV     R0, R5
00000240: EF000004    ;                 SVC     print_no
00000244: E24F00A1    ;                 ADRL    R0, today
00000248: E2400C01    ; 
0000024C: EF000003    ;                 SVC     print_str
00000250: E3A0000A    ;                 MOV     R0, #cLF
00000254: EF000000    ;                 SVC     print_char
00000258:             ; 
00000258:             ; ; else
00000258: EA00000B    ;                 B       end2
0000025C:             ; else1
0000025C:             ; ; print("This person will be " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(
                      ; year))
0000025C: E24F00B1    ;                 ADRL    R0, willbe
00000260: E2400C01    ; 
00000264: EF000003    ;                 SVC     print_str
00000268: E1A00005    ;                 MOV     R0, R5
0000026C: EF000004    ;                 SVC     print_no
00000270: E24F00E2    ;                 ADRL    R0, on
00000274: E2400C01    ; 
00000278: EF000003    ;                 SVC     print_str
0000027C:             ; 
0000027C: E3A03003    ;         MOV R3, #3
00000280: E92D4000    ;         STMFD SP!, {LR}
00000284: EBFFFF92    ;         BL printDate
00000288: E8BD4000    ;         LDMFD SP!, {LR}
0000028C:             ; 
0000028C:             ; 
0000028C:             ; 
0000028C:             ; ; }// end of printAgeHistory
0000028C: E8BD0070    ; end2            LDMFD SP!,      {R4-R6}         ; callee saved registers
00000290: E1A0F00E    ;                 MOV     PC, LR
00000294:             ; 
00000294: 41 6E 6F 74 ; another         DEFB    "Another person",10,0
00000298: 68 65 72 20 ; 
0000029C: 70 65 72 73 ; 
000002A0: 6F 6E 0A 00 ; 
000002A4:             ;                 ALIGN
000002A4:             ; 
000002A4:             ; ; def main():
000002A4:             ; main
000002A4: E59F40A8    ;         LDR     R4, =&12345678          ; Test value - not part of Java compilation
000002A8: E1A05004    ;         MOV     R5, R4                  ; See later if these registers corrupted
000002AC: E1A06004    ;         MOV     R6, R4
000002B0:             ; 
000002B0:             ; ; printAgeHistory(pDay, pMonth, 2000)
000002B0: E51F01F0    ;                 LDR     R0, pDay
000002B4: E51F11F0    ;                 LDR     R1, pMonth
000002B8: E3A02E7D    ;                 MOV     R2, #2000
000002BC: EBFFFFB2    ;                 BL      printAgeHistory
000002C0:             ; 
000002C0:             ; ; print("Another person");
000002C0: E24F0034    ;                 ADRL    R0, another
000002C4: EF000003    ;                 SVC     print_str
000002C8:             ; 
000002C8:             ; ; printAgeHistory(13, 11, 2000)
000002C8: E3A0000D    ;                 MOV     R0, #13
000002CC: E3A0100B    ;                 MOV     R1, #11
000002D0: E3A02E7D    ;                 MOV     R2, #2000
000002D4: EBFFFFAC    ;                 BL      printAgeHistory
000002D8:             ; 
000002D8:             ;         ; Now check to see if register values intact (Not part of Java)
000002D8: E59F0074    ;         LDR     R0, =&12345678          ; Test value
000002DC: E1540000    ;         CMP     R4, R0                  ; Did you preserve these registers?
000002E0: 01550000    ;         CMPEQ   R5, R0                  ;
000002E4: 01560000    ;         CMPEQ   R6, R0                  ;
000002E8:             ; 
000002E8: 128F0014    ;         ADRLNE  R0, whoops1             ; Oh dear!
000002EC: 1F000003    ;         SVCNE   print_str               ;
000002F0:             ; 
000002F0: E24F0FA3    ;         ADRL    R0, _stack              ; Have you balanced pushes & pops?
000002F4: E15D0000    ;         CMP     SP, R0                  ;
000002F8:             ; 
000002F8: 128F002A    ;         ADRLNE  R0, whoops2             ; Oh no!!
000002FC: 1F000003    ;         SVCNE   print_str               ; End of test code
00000300:             ; 
00000300:             ; ; }// end of main
00000300: EF000002    ;                 SVC     stop
00000304:             ; 
00000304:             ; 
00000304: 0A 2A 2A 20 ; whoops1         DEFB    "\n** BUT YOU CORRUPTED REGISTERS!  **\n", 0
00000308: 42 55 54 20 ; 
0000030C: 59 4F 55 20 ; 
00000310: 43 4F 52 52 ; 
00000314: 55 50 54 45 ; 
00000318: 44 20 52 45 ; 
0000031C: 47 49 53 54 ; 
00000320: 45 52 53 21 ; 
00000324: 20 20 2A 2A ; 
00000328: 0A 00       ; 
0000032A: 0A 2A 2A 20 ; whoops2         DEFB    "\n** BUT YOUR STACK DIDN'T BALANCE!  **\n", 0
0000032E: 42 55 54 20 ; 
00000332: 59 4F 55 52 ; 
00000336: 20 53 54 41 ; 
0000033A: 43 4B 20 44 ; 
0000033E: 49 44 4E 27 ; 
00000342: 54 20 42 41 ; 
00000346: 4C 41 4E 43 ; 
0000034A: 45 21 20 20 ; 
0000034E: 2A 2A 0A 00 ; 
00000352:             ; 
00000352: 00 00       ; (padding)
00000354: 12345678    ; Remaining literals

Symbol Table: Labels
: print_char                        00000000  Value
: stop                              00000002  Value
: print_str                         00000003  Value
: print_no                          00000004  Value
: cLF                               0000000A  Value
: _stack                            0000006C  Local -- ARM
: wasborn                           0000006C  Local -- ARM
: was                               00000085  Local -- ARM
: on                                00000096  Local -- ARM
: is                                0000009B  Local -- ARM
: today                             000000AB  Local -- ARM
: willbe                            000000B3  Local -- ARM
: pDay                              000000C8  Local -- ARM
: pMonth                            000000CC  Local -- ARM
: pYear                             000000D0  Local -- ARM
: printDate                         000000D4  Local -- ARM
: endPrint                          000000EC  Local -- ARM
: born                              000000F0  Local -- ARM
: past                              00000124  Local -- ARM
: future                            00000158  Local -- ARM
: printAgeHistory                   0000018C  Local -- ARM
: loop1                             000001B4  Local -- ARM
: end1                              00000218  Local -- ARM
: else1                             0000025C  Local -- ARM
: end2                              0000028C  Local -- ARM
: another                           00000294  Local -- ARM
: main                              000002A4  Local -- ARM
: whoops1                           00000304  Local -- ARM
: whoops2                           0000032A  Local -- ARM
