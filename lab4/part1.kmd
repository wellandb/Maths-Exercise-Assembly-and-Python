KMD
00000000:             ; ; COMP15111 lab 4 - Template file
00000000:             ; 
00000000:             ; print_char      equ     0               ; Define names to aid readability
00000000:             ; stop            equ     2
00000000:             ; print_str       equ     3
00000000:             ; print_no        equ     4
00000000:             ; 
00000000:             ; cLF             equ     10              ; Line-feed character
00000000:             ; 
00000000:             ; 
00000000: E28FD064    ;                 ADR     SP, _stack      ; set SP pointing to the end of our stack
00000004: EA00008A    ;                 B       main
00000008:             ; 
00000008:             ;                 DEFS    100             ; this chunk of memory is for the stack
0000006C:             ; _stack                                  ; This label is 'just after' the stack space
0000006C:             ; 
0000006C:             ; 
0000006C: 54 68 69 73 ; wasborn         DEFB    "This person was born on ",0
00000070: 20 70 65 72 ; 
00000074: 73 6F 6E 20 ; 
00000078: 77 61 73 20 ; 
0000007C: 62 6F 72 6E ; 
00000080: 20 6F 6E 20 ; 
00000084: 00          ; 
00000085: 54 68 69 73 ; was             DEFB    "This person was ",0
00000089: 20 70 65 72 ; 
0000008D: 73 6F 6E 20 ; 
00000091: 77 61 73 20 ; 
00000095: 00          ; 
00000096: 20 6F 6E 20 ; on              DEFB    " on ",0
0000009A: 00          ; 
0000009B: 54 68 69 73 ; is              DEFB    "This person is ",0
0000009F: 20 70 65 72 ; 
000000A3: 73 6F 6E 20 ; 
000000A7: 69 73 20 00 ; 
000000AB: 20 74 6F 64 ; today           DEFB    " today!",0
000000AF: 61 79 21 00 ; 
000000B3: 54 68 69 73 ; willbe          DEFB    "This person will be ",0
000000B7: 20 70 65 72 ; 
000000BB: 73 6F 6E 20 ; 
000000BF: 77 69 6C 6C ; 
000000C3: 20 62 65 20 ; 
000000C7: 00          ; 
000000C8:             ;                 ALIGN
000000C8:             ; 
000000C8: 00000017    ; pDay              DEFW  23              ;  pDay = 23    //or whatever is today's date
000000CC: 0000000B    ; pMonth          DEFW    11              ;  pMonth = 11  //or whatever is this month
000000D0: 000007D5    ; pYear             DEFW  2005    ;  pYear = 2005 //or whatever is this year
000000D4:             ; 
000000D4:             ; 
000000D4:             ; ; def printAgeHistory (bDay, bMonth, bYear)
000000D4:             ; 
000000D4:             ; ; parameters
000000D4:             ; ;  R0 = bDay (on entry, moved to R6 to allow SVC to output via R0)
000000D4:             ; ;  R1 = bMonth
000000D4:             ; ;  R2 = bYear
000000D4:             ; ; local variables (callee-saved registers)
000000D4:             ; ;  R4 = year
000000D4:             ; ;  R5 = age
000000D4:             ; ;  R6 = bDay - originally R0
000000D4:             ; 
000000D4: E92D0040    ; printAgeHistory STMFD SP!,      {R6}                    ; callee saves three registers
000000D8: E92D0020    ;             STMFD SP!,  {R5}
000000DC: E92D0010    ;                 STMFD SP!,      {R4}
000000E0:             ; 
000000E0: E59D6014    ;                 LDR     R6, [SP, #(3 + 2) * 4]  ; Get parameters from stack
000000E4: E59D1010    ;                 LDR     R1, [SP, #(3 + 1) * 4]
000000E8: E59D200C    ;                 LDR     R2, [SP, #(3 + 0) * 4]
000000EC:             ; 
000000EC:             ; ;   year = bYear + 1
000000EC: E2824001    ;                 ADD     R4, R2, #1
000000F0:             ; ;   age = 1;
000000F0: E3A05001    ;                 MOV     R5, #1
000000F4:             ; 
000000F4:             ; ; print("This person was born on " + str(bDay) + "/" + str(bMonth) + "/" + str(bYear))
000000F4: E24F0090    ;                 ADRL    R0, wasborn
000000F8: EF000003    ;                 SVC     print_str
000000FC: E1A00006    ;                 MOV     R0, R6
00000100: EF000004    ;                 SVC     print_no
00000104: E3A0002F    ;                 MOV     R0, #'/'
00000108: EF000000    ;                 SVC     print_char
0000010C: E1A00001    ;                 MOV     R0, R1
00000110: EF000004    ;                 SVC     print_no
00000114: E3A0002F    ;                 MOV     R0, #'/'
00000118: EF000000    ;                 SVC     print_char
0000011C: E1A00002    ;                 MOV     R0, R2
00000120: EF000004    ;                 SVC     print_no
00000124: E3A0000A    ;                 MOV     R0, #cLF
00000128: EF000000    ;                 SVC     print_char
0000012C:             ; 
0000012C:             ; ; this code does: while year < pYear //{
0000012C: E51F0064    ; loop1   LDR     R0, pYear
00000130: E1540000    ;                 CMP     R4, R0
00000134: 2A000014    ;                 BHS     end1            ; Years are unsigned
00000138:             ; ; for part 4, should be changed to:
00000138:             ; ; while year < pYear or
00000138:             ; ;                               (year == pYear and bMonth < pMonth) or
00000138:             ; ;                               (year == pYear and bMonth == pMonth and bDay < pDay):
00000138:             ; 
00000138:             ; ;  print("This person was " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(yea
                      ; r))
00000138: E24F00BB    ;                 ADRL    R0, was
0000013C: EF000003    ;                 SVC     print_str
00000140: E1A00005    ;                 MOV     R0, R5
00000144: EF000004    ;                 SVC     print_no
00000148: E24F00BA    ;                 ADRL    R0, on
0000014C: EF000003    ;                 SVC     print_str
00000150: E1A00006    ;                 MOV     R0, R6
00000154: EF000004    ;                 SVC     print_no
00000158: E3A0002F    ;                 MOV     R0, #'/'
0000015C: EF000000    ;                 SVC     print_char
00000160: E1A00001    ;                 MOV     R0, R1
00000164: EF000004    ;                 SVC     print_no
00000168: E3A0002F    ;                 MOV     R0, #'/'
0000016C: EF000000    ;                 SVC     print_char
00000170: E1A00004    ;                 MOV     R0, R4
00000174: EF000004    ;                 SVC     print_no
00000178: E3A0000A    ;                 MOV     R0, #cLF
0000017C: EF000000    ;                 SVC     print_char
00000180:             ; 
00000180:             ;                 ; year = year + 1
00000180: E2844001    ;                 ADD     R4, R4, #1
00000184:             ;                 ; age = age + 1
00000184: E2855001    ;                 ADD     R5, R5, #1
00000188:             ;                 ; //}
00000188: EAFFFFE7    ;                 B       loop1
0000018C:             ; 
0000018C:             ; end1
0000018C:             ; ; this code does: if (bMonth == pMonth):
0000018C:             ; ; for part 4, should be changed to:
0000018C:             ; ; if (bMonth == pMonth and bDay == pDay):
0000018C: E51F00C8    ;                 LDR     R0, pMonth
00000190: E1510000    ;                 CMP     R1, R0
00000194: 1A00000A    ;                 BNE     else1
00000198:             ; 
00000198:             ; ; print("This person is " + str(age) + " today!")
00000198: E24F0005    ;                 ADRL    R0, is
0000019C: E2400C01    ; 
000001A0: EF000003    ;                 SVC     print_str
000001A4: E1A00005    ;                 MOV     R0, R5
000001A8: EF000004    ;                 SVC     print_no
000001AC: E24F0009    ;                 ADRL    R0, today
000001B0: E2400C01    ; 
000001B4: EF000003    ;                 SVC     print_str
000001B8: E3A0000A    ;                 MOV     R0, #cLF
000001BC: EF000000    ;                 SVC     print_char
000001C0:             ; 
000001C0:             ; ; else
000001C0: EA000013    ;                 B       end2
000001C4:             ; else1
000001C4:             ; ; print("This person will be " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(
                      ; year))
000001C4: E24F0019    ;                 ADRL    R0, willbe
000001C8: E2400C01    ; 
000001CC: EF000003    ;                 SVC     print_str
000001D0: E1A00005    ;                 MOV     R0, R5
000001D4: EF000004    ;                 SVC     print_no
000001D8: E24F004A    ;                 ADRL    R0, on
000001DC: E2400C01    ; 
000001E0: EF000003    ;                 SVC     print_str
000001E4: E1A00006    ;                 MOV     R0, R6
000001E8: EF000004    ;                 SVC     print_no
000001EC: E3A0002F    ;                 MOV     R0, #'/'
000001F0: EF000000    ;                 SVC     print_char
000001F4: E1A00001    ;                 MOV     R0, R1
000001F8: EF000004    ;                 SVC     print_no
000001FC: E3A0002F    ;                 MOV     R0, #'/'
00000200: EF000000    ;                 SVC     print_char
00000204: E1A00004    ;                 MOV     R0, R4
00000208: EF000004    ;                 SVC     print_no
0000020C: E3A0000A    ;                 MOV     R0, #cLF
00000210: EF000000    ;                 SVC     print_char
00000214:             ; 
00000214:             ; ; }// end of printAgeHistory
00000214: E8BD0010    ; end2            POP     {R4}            ; callee saved registers
00000218: E8BD0020    ;                 POP     {R5}
0000021C: E8BD0040    ;                 POP     {R6}
00000220: E1A0F00E    ;                 MOV     PC, LR
00000224:             ; 
00000224: 41 6E 6F 74 ; another         DEFB    "Another person",10,0
00000228: 68 65 72 20 ; 
0000022C: 70 65 72 73 ; 
00000230: 6F 6E 0A 00 ; 
00000234:             ;                 ALIGN
00000234:             ; 
00000234:             ; ; def main():
00000234:             ; main
00000234: E59F40D8    ;         LDR     R4, =&12345678          ; Test value - not part of Java compilation
00000238: E1A05004    ;         MOV     R5, R4                  ; See later if these registers corrupted
0000023C: E1A06004    ;         MOV     R6, R4
00000240:             ; 
00000240:             ; ; printAgeHistory(pDay, pMonth, 2000)
00000240: E51F0180    ;                 LDR     R0, pDay
00000244: E92D0001    ;                 STMFD SP!,      {R0}                    ; Stack first parameter
00000248: E51F0184    ;                 LDR     R0, pMonth
0000024C: E92D0001    ;                 STMFD SP!,      {R0}                    ; Stack second parameter
00000250: E3A00E7D    ;                 MOV     R0, #2000
00000254: E92D0001    ;                 STMFD SP!,      {R0}                    ; Stack third parameter
00000258: EBFFFF9D    ;                 BL      printAgeHistory
0000025C: E8BD0001    ;                 LDMFD SP!,      {R0}                    ; Deallocate three 32-bit variables
00000260: E8BD0001    ;                 LDMFD SP!,      {R0}
00000264: E8BD0001    ;                 LDMFD SP!,      {R0}
00000268:             ; 
00000268:             ; ; print("Another person");
00000268: E24F004C    ;                 ADRL    R0, another
0000026C: EF000003    ;                 SVC     print_str
00000270:             ; 
00000270:             ; ; printAgeHistory(13, 11, 2000)
00000270: E3A0000D    ;                 MOV     R0, #13
00000274: E92D0001    ;                 STMFD SP!,      {R0}                    ; Stack first parameter
00000278: E3A0000B    ;                 MOV     R0, #11
0000027C: E52D0004    ;                 STR     R0, [SP, #-4]!          ; An explicit coding of PUSH
00000280: E3A00E7D    ;                 MOV     R0, #2000
00000284: E92D0001    ;                 STMFD   SP!, {R0}               ; The STore Multiple mnemonic for PUSH {R0}
00000288: EBFFFF91    ;                 BL      printAgeHistory
0000028C: E8BD0001    ;                 LDMFD SP!,      {R0}                    ; Deallocate three 32-bit variables
00000290: E8BD0001    ;                 LDMFD SP!,      {R0}
00000294: E8BD0001    ;                 LDMFD SP!,      {R0}
00000298:             ; 
00000298:             ;         ; Now check to see if register values intact (Not part of Java)
00000298: E59F0074    ;         LDR     R0, =&12345678          ; Test value
0000029C: E1540000    ;         CMP     R4, R0                  ; Did you preserve these registers?
000002A0: 01550000    ;         CMPEQ   R5, R0                  ;
000002A4: 01560000    ;         CMPEQ   R6, R0                  ;
000002A8:             ; 
000002A8: 128F0014    ;         ADRLNE  R0, whoops1             ; Oh dear!
000002AC: 1F000003    ;         SVCNE   print_str               ;
000002B0:             ; 
000002B0: E24F0F93    ;         ADRL    R0, _stack              ; Have you balanced pushes & pops?
000002B4: E15D0000    ;         CMP     SP, R0                  ;
000002B8:             ; 
000002B8: 128F002A    ;         ADRLNE  R0, whoops2             ; Oh no!!
000002BC: 1F000003    ;         SVCNE   print_str               ; End of test code
000002C0:             ; 
000002C0:             ; ; }// end of main
000002C0: EF000002    ;                 SVC     stop
000002C4:             ; 
000002C4:             ; 
000002C4: 0A 2A 2A 20 ; whoops1         DEFB    "\n** BUT YOU CORRUPTED REGISTERS!  **\n", 0
000002C8: 42 55 54 20 ; 
000002CC: 59 4F 55 20 ; 
000002D0: 43 4F 52 52 ; 
000002D4: 55 50 54 45 ; 
000002D8: 44 20 52 45 ; 
000002DC: 47 49 53 54 ; 
000002E0: 45 52 53 21 ; 
000002E4: 20 20 2A 2A ; 
000002E8: 0A 00       ; 
000002EA: 0A 2A 2A 20 ; whoops2         DEFB    "\n** BUT YOUR STACK DIDN'T BALANCE!  **\n", 0
000002EE: 42 55 54 20 ; 
000002F2: 59 4F 55 52 ; 
000002F6: 20 53 54 41 ; 
000002FA: 43 4B 20 44 ; 
000002FE: 49 44 4E 27 ; 
00000302: 54 20 42 41 ; 
00000306: 4C 41 4E 43 ; 
0000030A: 45 21 20 20 ; 
0000030E: 2A 2A 0A 00 ; 
00000312:             ; 
00000312: 00 00       ; (padding)
00000314: 12345678    ; Remaining literals

Symbol Table: Labels
: print_char                        00000000  Value
: stop                              00000002  Value
: print_str                         00000003  Value
: print_no                          00000004  Value
: cLF                               0000000A  Value
: _stack                            0000006C  Local -- ARM
: wasborn                           0000006C  Local -- ARM
: was                               00000085  Local -- ARM
: on                                00000096  Local -- ARM
: is                                0000009B  Local -- ARM
: today                             000000AB  Local -- ARM
: willbe                            000000B3  Local -- ARM
: pDay                              000000C8  Local -- ARM
: pMonth                            000000CC  Local -- ARM
: pYear                             000000D0  Local -- ARM
: printAgeHistory                   000000D4  Local -- ARM
: loop1                             0000012C  Local -- ARM
: end1                              0000018C  Local -- ARM
: else1                             000001C4  Local -- ARM
: end2                              00000214  Local -- ARM
: another                           00000224  Local -- ARM
: main                              00000234  Local -- ARM
: whoops1                           000002C4  Local -- ARM
: whoops2                           000002EA  Local -- ARM
